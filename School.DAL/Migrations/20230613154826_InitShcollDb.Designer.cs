// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using School.DAL;

#nullable disable

namespace School.DAL.Migrations
{
    [DbContext(typeof(ShcoolDb))]
    [Migration("20230613154826_InitShcollDb")]
    partial class InitShcollDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ScheduleTeacher", b =>
                {
                    b.Property<int>("SchedulesId")
                        .HasColumnType("int");

                    b.Property<int>("TeachersId")
                        .HasColumnType("int");

                    b.HasKey("SchedulesId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("ScheduleTeacher");
                });

            modelBuilder.Entity("School.DAL.Entities.ClassRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("ClassRooms");
                });

            modelBuilder.Entity("School.DAL.Entities.ClassroomTeacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassRoomId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("DirectorId");

                    b.ToTable("ClassroomTeachers");
                });

            modelBuilder.Entity("School.DAL.Entities.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("School.DAL.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassRoomId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassroomTeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DayOfWeak")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("ClassroomTeacherId");

                    b.HasIndex("StudentId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("School.DAL.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("School.DAL.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassRoomId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassroomTeacherId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("ClassroomTeacherId");

                    b.HasIndex("DirectorId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("School.DAL.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassRoomId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassroomTeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("ClassroomTeacherId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("School.DAL.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassroomTeacherId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomTeacherId");

                    b.HasIndex("DirectorId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("StudentTeacher", b =>
                {
                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.Property<int>("TeachersId")
                        .HasColumnType("int");

                    b.HasKey("StudentsId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("StudentTeacher");
                });

            modelBuilder.Entity("ScheduleTeacher", b =>
                {
                    b.HasOne("School.DAL.Entities.Schedule", null)
                        .WithMany()
                        .HasForeignKey("SchedulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("School.DAL.Entities.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("School.DAL.Entities.ClassRoom", b =>
                {
                    b.HasOne("School.DAL.Entities.School", "School")
                        .WithMany("ClassRooms")
                        .HasForeignKey("SchoolId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("School.DAL.Entities.ClassroomTeacher", b =>
                {
                    b.HasOne("School.DAL.Entities.ClassRoom", "ClassRoom")
                        .WithMany()
                        .HasForeignKey("ClassRoomId");

                    b.HasOne("School.DAL.Entities.Director", "Director")
                        .WithMany()
                        .HasForeignKey("DirectorId");

                    b.Navigation("ClassRoom");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("School.DAL.Entities.Director", b =>
                {
                    b.HasOne("School.DAL.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("School.DAL.Entities.Schedule", b =>
                {
                    b.HasOne("School.DAL.Entities.ClassRoom", "ClassRoom")
                        .WithMany()
                        .HasForeignKey("ClassRoomId");

                    b.HasOne("School.DAL.Entities.ClassroomTeacher", null)
                        .WithMany("Schedules")
                        .HasForeignKey("ClassroomTeacherId");

                    b.HasOne("School.DAL.Entities.Student", null)
                        .WithMany("Schedules")
                        .HasForeignKey("StudentId");

                    b.Navigation("ClassRoom");
                });

            modelBuilder.Entity("School.DAL.Entities.Student", b =>
                {
                    b.HasOne("School.DAL.Entities.ClassRoom", "ClassRoom")
                        .WithMany("Students")
                        .HasForeignKey("ClassRoomId");

                    b.HasOne("School.DAL.Entities.ClassroomTeacher", "ClassroomTeacher")
                        .WithMany("Students")
                        .HasForeignKey("ClassroomTeacherId");

                    b.HasOne("School.DAL.Entities.Director", "Director")
                        .WithMany("Students")
                        .HasForeignKey("DirectorId");

                    b.HasOne("School.DAL.Entities.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolId");

                    b.Navigation("ClassRoom");

                    b.Navigation("ClassroomTeacher");

                    b.Navigation("Director");

                    b.Navigation("School");
                });

            modelBuilder.Entity("School.DAL.Entities.Subject", b =>
                {
                    b.HasOne("School.DAL.Entities.ClassRoom", null)
                        .WithMany("Lessons")
                        .HasForeignKey("ClassRoomId");

                    b.HasOne("School.DAL.Entities.ClassroomTeacher", null)
                        .WithMany("Subjects")
                        .HasForeignKey("ClassroomTeacherId");

                    b.HasOne("School.DAL.Entities.Schedule", null)
                        .WithMany("Subjects")
                        .HasForeignKey("ScheduleId");

                    b.HasOne("School.DAL.Entities.School", null)
                        .WithMany("Subjects")
                        .HasForeignKey("SchoolId");

                    b.HasOne("School.DAL.Entities.Student", null)
                        .WithMany("Subjects")
                        .HasForeignKey("StudentId");

                    b.HasOne("School.DAL.Entities.Teacher", "Teacher")
                        .WithMany("Lessons")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("School.DAL.Entities.Teacher", b =>
                {
                    b.HasOne("School.DAL.Entities.ClassroomTeacher", "ClassroomTeacher")
                        .WithMany()
                        .HasForeignKey("ClassroomTeacherId");

                    b.HasOne("School.DAL.Entities.Director", "Director")
                        .WithMany("Teachers")
                        .HasForeignKey("DirectorId");

                    b.HasOne("School.DAL.Entities.School", null)
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId");

                    b.Navigation("ClassroomTeacher");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("StudentTeacher", b =>
                {
                    b.HasOne("School.DAL.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("School.DAL.Entities.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("School.DAL.Entities.ClassRoom", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("School.DAL.Entities.ClassroomTeacher", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("School.DAL.Entities.Director", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("School.DAL.Entities.Schedule", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("School.DAL.Entities.School", b =>
                {
                    b.Navigation("ClassRooms");

                    b.Navigation("Students");

                    b.Navigation("Subjects");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("School.DAL.Entities.Student", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("School.DAL.Entities.Teacher", b =>
                {
                    b.Navigation("Lessons");
                });
#pragma warning restore 612, 618
        }
    }
}
